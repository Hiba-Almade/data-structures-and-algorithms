/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest<T> {
  Graph graph = new Graph();
    @Test public void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }

  @Test
  public void emptyGraphTest(){

    assertEquals( 0, graph.getSize());
  }

  @Test
  public void addNodeGraphTest() {
    Node n1 = graph.addNode(1);
    Node n2 = graph.addNode(2);
    assertTrue( graph.getSize() == 2);
    assertTrue( graph.getNodes().contains(n1));
    assertTrue( graph.getNodes().contains(n2));
  }

  @Test
  public void addEdgeGraphTest() {
    Node n1 = graph.addNode(1);
    Node n2 = graph.addNode(2);

    graph.addEdge(n1,n2,5);
    assertEquals(1,graph.getNeighbors(n1).size());
   assertEquals(1,graph.getNeighbors(n2).size());


  }

  @Test
  public void getNodes() {

    Node n1 = graph.addNode(1);
    Node n2 = graph.addNode(2);

    assertTrue(graph.getNodes().contains(n1));
    assertTrue(graph.getNodes().contains(n2));

  }

  @Test
  public void breadthFirstGraphTest() {

      Node n= graph.addNode("Pandora");
      Node n1= graph.addNode("Arendelle");
      Node n2= graph.addNode("Metroville");
      Node n3= graph.addNode("Monstroplolis");
      Node n4= graph.addNode("Narnia");
      Node n5= graph.addNode("Naboo");
      graph.addEdge(n,n1,0);
      graph.addEdge(n1,n2,0);
      graph.addEdge(n1,n3,0);
      graph.addEdge(n3,n4,0);
      graph.addEdge(n3,n5,0);
      graph.addEdge(n2,n3,0);
      graph.addEdge(n3,n5,0);
      graph.addEdge(n4,n5,0);
      List<String> bft = graph.breadthFirst(n);
      String expected = "[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]";
      assertEquals(expected, bft.toString());

  }

  @Test
  public void tripGraphTest() {
    Node n1 = graph.addNode("1");
    Node n2 = graph.addNode("2");
    Node n3 = graph.addNode("3");

    graph.addEdge(n1,n2,5);
    graph.addEdge(n2,n3,2);
    assertEquals( "True, $7", graph.businessTrip(new String[]{"1", "2","3"}));
    assertEquals( "False, $0", graph.businessTrip(new String[]{"1","3"}));
  }

  @Test
  public void DTFTest(){

    Node n= graph.addNode("A");
    Node n1=graph.addNode("B");
    Node n2=graph.addNode("C");
    Node n3= graph.addNode("D");
    Node n4=graph.addNode("E");
    Node n5=graph.addNode("F");
    Node n6= graph.addNode("G");
    Node n7=graph.addNode("H");
    graph.addEdge(n,n1,0);
    graph.addEdge(n,n3,0);
    graph.addEdge(n1,n2,0);
    graph.addEdge(n1,n3,0);
    graph.addEdge(n2,n6,0);
    graph.addEdge(n3,n4,0);
    graph.addEdge(n3,n7,0);
    graph.addEdge(n3,n5,0);
    graph.addEdge(n5,n7,0);
    List<String> dft = graph.depthFirst(n);
    String expected = "[A, B, D, C, E, H, F, G]";
    assertEquals(expected, dft.toString());
  }

}
